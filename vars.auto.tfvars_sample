# It is recommended to bring these variables
# into Terraform Cloud so they can be secured

################################################################################
# AWS Required Variables
################################################################################
#Core Authentication - these should be placed into the Terraform Cloud as ENV vars
#Alternatively you should use the AWS CLI and the [default] profile to run this locally.
#Only adding them here wont work
aws_access_key_id     = "AKIA..."
aws_secret_access_key = "..."

#Do you need to grant a particular user access to the EKS cluster (might be different from the credentials above?)
#This is required if you are using AWS SSO to manage your users
aws_user_eks = "arn:aws:iam::123456789:user/AWSReservedSSO_AdministratorAccess_b036e5/user.name@tymlez.com"
aws_role_eks = "arn:aws:iam::123456789:role/AWSReservedSSO_AdministratorAccess_b036e5"

#EKS Cluster Size
eks_config = {
  instance_types = ["t3a.xlarge"]
  min_size       = 1
  max_size       = 3
  desired_size   = 2
  capacity_type  = "SPOT"
}
################################################################################
# GCP Required Variables
################################################################################

#remove newlines from Service Account JSON and escape
gcp_service_account = "{\"client_id\": \"1053104\"..... \"token_uri\": \"https://oauth2.googleapis.com/token\"}"
gcp_project_id      = "gcp-project-id-124225"
gcp_region          = "australia-southeast1"

#these can be ignored if using AWS or unless you change your CIDRs for the VPC in GCP
gcp_local_whitelisted_ips = ["10.0.0.0/8", "192.168.0.0/16"]


################################################################################
# Common Required Variables
################################################################################



#VPC Requirements
vpc_name = "dev" #must not exist
vpc_cidr = "10.0.0.0/16"

firewall_default = "deny"
whitelisted_ips  = ["8.8.8.8/32", "1.2.3.4/32"]
ingress_whitelisted_ips = ["0.0.0.0/0", "123.123.123.123/32"]
#please note - our FQDN convention is:
#cluster_name.stage.app_name.tld
#e.g: guardian.dev.tymlez.tymlez.com

app_name     = "tymlez" #or customer name
cluster_name = "guardian-cluster"
tld          = "tymlez.com"
stage        = "dev"
use_ingress = true
docker_repository = "gcr.io/hedera-registry"

#Guardian Requirements
guardian_operator_id         = "0.0.12345678"
guardian_operator_key        = "<operator key>"
guardian_ipfs_key            = "<nft / ipfs service key here>"
guardian_topic_id            = "0.0.12345678"
guardian_access_token_secret = "supersecretsauce"
guardian_static_ip           = ""
guardian_version             = "2.3.1" #or "latest"
guardian_network             = "testnet"
guardian_max_transaction_fee = "10"
guardian_initial_balance     = "30"
guardian_initial_standard_registry_balance = "100"
guardian_logger_level        = 2
guardian_mongodb_persistent_size = 50Gi

#custom_helm_repository = "https://charts.bitnami.com/bitnami"
#custom_helm_charts     = ["nginx"]
#custom_helm_version    = "13.1.8"
#custom_helm_values_yaml = {
#  "nginx" = {
#    image = {
#      tag = "latest"
#    }
#  }
#}
#custom_helm_repository_username = ""
#custom_helm_repository_password = ""

# if you want expose your service via ingress, this only works when use_ingress is true
#custom_helm_ingresses = {
#  enable       = true
#  service_path = "/your-api(/|$)(.*)"
#  service_port = 9090 // the port that your service listen on
#  service_name = "your k8s service name in same name spaces"
#}


# to enable newrelic APM
enabled_newrelic=false
newrelic_license_key = "your newrelic license key if enable_newrelic=true"

# Custom container size
resource_configs = { 
  guardian_logger_service = {
      cpu    = "250m",
      memory = "256Mi",
      replicas  = 1,
      autoscale = false
    }
  guardian_auth_service = {
      cpu    = "250m",
      memory = "256Mi",
      replicas  = 1,
      autoscale = false
    }
    guardian_ipfs_client = {
      cpu    = "250m",
      memory = "256Mi",
      replicas  = 1,
      autoscale = false
    }
    guardian_api_gateway = {
      cpu    = "500m",
      memory = "256Mi",
      replicas  = 1,
      autoscale = false
    }
    guardian_guardian_service ={
      cpu    = "500m",
      memory = "256Mi",
      replicas  = 2,
      autoscale = false
    }
    guardian_frontend = {
      cpu       = "100m",
      memory    = "128Mi",
      replicas  = 1,
      autoscale = false
    }
    nats ={
      cpu    = "500m",
      memory = "256Mi",
      replicas  = 1,
      autoscale = false
    }
}




